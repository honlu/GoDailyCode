package greedy

import (
	"sort"
)

/*
2
455.分发饼干
day:2022-6-17
update: 2023-2-2 by lu
link:https://leetcode.cn/problems/assign-cookies/
question:
	假设你是一位很棒的家长，想要给你的孩子们一些小饼干。
	但是，每个孩子最多只能给一块饼干。

	对每个孩子 i，都有一个胃口值 g[i]，
	这是能让孩子们满足胃口的饼干的最小尺寸；
	并且每块饼干 j，都有一个尺寸 s[j] 。
	如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
	这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，
	并输出这个最大数值。

idea:
	为了满足更多的小孩，就不要造成饼干尺寸的浪费。
	大尺寸的饼干既可以满足胃口大的孩子也可以满足胃口小的孩子，那么就应该优先满足胃口大的。
	局部最优就是大饼干喂给胃口大的，充分利用饼干尺寸喂饱一个，
	全局最优就是喂饱尽可能多的小孩。

	可以尝试使用贪心策略，先将饼干数组和小孩数组排序。
	然后从后向前遍历小孩数组，用大饼干优先满足胃口大的，并统计满足小孩数量。
*/
// 贪心
func findContentChildren(g []int, s []int) int {
	// 首先排序，从小到大
	sort.Ints(g)                       // 胃口
	sort.Ints(s)                       // 饼干尺寸
	size := len(s) - 1                 // 饼干数组的下标
	res := 0                           // 结果
	for i := len(g) - 1; i >= 0; i-- { // 遍历胃口
		if size >= 0 && s[size] >= g[i] { // 遍历饼干，这两并的顺序不能调整。以防索引越界，panic
			// 这里用index来控制饼干数组的遍历，遍历饼干并没有再起一个for循环，
			// 而是采用自减的方式，这也是常用的技巧。注意不可以 先遍历 饼干，在遍历胃口
			size--
			res++
		}
	}
	return res
}

// 贪心：先局部最有，进而推到全局最优
// 换个思路：小饼干先喂饱小胃口
// 注意这种写法，两个循环的顺序改变了，
// 先遍历的饼干，在遍历的胃口，这是因为遍历顺序变了，我们是从小到大遍历。
func findContentChildren(g []int, s []int) int {
	sort.Ints(g) // 排序孩子数组
	sort.Ints(s) // 排序饼干数组
	// 从小到大
	res := 0
	for i := 0; i < len(s); i++ { // 先遍历饼干
		if res < len(g) && s[i] >= g[res] { // //如果饼干的大小大于或等于孩子的为空则给与，否则不给予，继续寻找选一个饼干是否符合
			res++
		}
	}
	return res
}
