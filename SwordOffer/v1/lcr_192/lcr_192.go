package lcr192

import (
	"math"
	"strings"
)

/*
题目：把字符串转变成整数

  - https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/description/?envType=study-plan-v2&envId=coding-interviews

  - 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
    函数 myAtoi(string s) 的算法如下：
    读入字符串并丢弃无用的前导空格
    检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
    读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
    将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
    如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
    返回整数作为最终结果。
    注意：

  - 本题中的空白字符只包括空格字符 ' ' 。

  - 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。

  - 示例 1：
    输入：s = "42"
    输出：42
    解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
    第 1 步："42"（当前没有读入字符，因为没有前导空格）
    ^
    第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    ^
    第 3 步："42"（读入 "42"）
    ^
    解析：42 为符合要求的数字

  - 示例 2：
    输入：s = "   -42"
    输出：-42
    解释：
    第 1 步："   -42"（读入前导空格，但忽视掉）

    第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
    ^
    第 3 步："   -42"（读入 "42"）
    ^
    解析：-42 为符合要求的数字

  - 示例 3：
    输入：s = "4193 with words"
    输出：4193
    解释：
    第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
    ^
    第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    ^
    第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
    ^
    解析：数字 "4193" 被视为有效数字

  - 示例 4：
    输入：s = "words and 987"
    输出：0
    解释：
    第 1 步："words and 987"（当前没有读入字符，因为没有前导空格）
    ^
    第 2 步："words and 987"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    ^
    第 3 步："words and 987"（由于当前字符 'w' 不是一个数字，读入停止）
    ^
    解析：由于第一个非空白字符是 'w'，返回 0

题解：
- 1. 去除前后可能存在空格
- 2. 是否存在数字
- 3. 是否存在负号
- 4. 遍历字符串
- 5. 如果是数字，则number为true，判断是否超过最大值，如果超过则返回最大值或者最小值
- 6. 如果是+或者-，则判断是否是第一个字符或者前一个字符是空格，如果不是则返回false
- 7. 如果是其他字符，则返回0
*/
func myAtoi(str string) int {
	// 去除前后可能存在空格
	s := strings.TrimSpace(str)
	// 是否存在数字
	number := false
	// 是否存在负号
	sign := false
	// 结果
	res := 0
	for i := 0; i < len(s); i++ {
		if s[i] >= '0' && s[i] <= '9' { // 如果是数字，则number为true
			number = true
			// 判断是否超过最大值（最大值：2147483647）
			if res > math.MaxInt32/10 || (res == math.MaxInt32/10 && int(s[i]-'0') > 7) {
				if sign {
					return math.MinInt32
				}
				return math.MaxInt32
			}
			res = res*10 + int(s[i]-'0')
		} else if s[i] == '+' || s[i] == '-' {
			if sign || number || (i != 0 && s[i-1] != ' ') {
				break // 提前退出
			}
			sign = false
			if s[i] == '-' {
				sign = true
			}
		} else {
			break // 提前退出
		}
	}
	if sign {
		return -res
	}
	return res
}
